* 第一章 列表处理
**** 1. Lisp: LISt Processing即列表处理，和通过把列表放置在括号之间来处理列表（甚至是列表的列表）的编程语言。
**** 2. 括号标记了列表的边界
**** 3. 一个列表用单引号或表示标记开头
** 1.1 Lisp列表
**** 1. 数据和程序都是以同样的方式表示，用空格分隔
#+BEGIN_SRC lisp
'(this is has (a list inside of it))
#+END_SRC
*** 1.1.1 Lisp原子(atom)
**** 1. 在一个列表中，原子由空格分隔，可以紧接着括号
**** 2. 原子不可分割
****** TODO Question: 一个列表作为另一个列表的原子 怎么理解不可分隔？
**** 3. 列表的三种可能的组成方式
- 括号和括号中由空格分隔的原子
- 括号和括号中的其他列表
- 括号和括号中其他列表和原子
**** 4. 空列表()
- 空列表同时看作既是一个原子，也是一个列表
**** 5. 原子和列表被称作符号表达式(symbolic expression)
**** 6. 列表中双引号中的文本被认为是一个原子
- 这种原子被成为string
#+BEGIN_SRC lisp
'(this list includes "text betwwon quotation marks.")
#+END_SRC
** 1.2 运行一个程序
**** 1. 任何列表都是一个准备运行的程序
**** 2. 运行一个列表（术语称为：对一个列表求值）会出现以下三种结果之一
- 返回列表本身
- 返回出错消息
- 将列表中第一个符号当作命令操作符，执行命令,返回结果
**** 3. 单引号'
- 称为引用（quote)
- 当单引号位于列表最前面，表示对当前列表不做任何操作，保持原样使用
#+BEGIN_SRC lisp
'(返回当前列表)
#+END_SRC
- 如果列表最前面没有单引号，列表中第一个符号作为要执行的命令（术语称为：函数）
#+BEGIN_SRC lisp
(+ 2 2)
#+END_SRC
** 1.3 产生错误消息
#+BEGIN_SRC lisp
(this is an unquoted list)
#+END_SRC
- Symbol's function definition is void: this
- 'this'是一个没有定义的操作符
** 1.4 操作符和函数
**** 1. 操作符可以被定义为执行某个函数
**** 2. 一个符号只能定义为一个函数的操作符
** 1.5 Lisp解释器
**** 1. 解释器对列表求值的流程
- 查看列表是否以单引号开始
- 如果是 返回当前列表 如果不是 查看列表第一个元素 是否是一个函数定义
- 如果是 执行函数 返回结果 如果不是 返回错误信息
**** 2. 三种复杂情况
****** TODO 定义晦涩 需要进一步在实践中学习‘变量’‘特殊表(special form)’
**** 3. 字节编译
- 源文件为*.el，字节编译后的文件为*.elc
** 1.6 求值
**** 1. 解释器返回结果的同时可以做另外的动作，称为附带效果(side effect)
****** DOING 学习附带效果的具体代码
       - State "DOING"      from "TODO"       [2015-08-23 Sun 11:00]
例一：1.9.1 使用set函数
**** 2. 对内部列表求值
- 内层列表先被求值，结果用于外层列表
#+BEGIN_SRC lisp
(+ 2 (+ 3 3))
#+END_SRC
**** 3. 命令eval-last-sexp的含义
- 快捷方式：C-x C-e
- sexp: symbol expression(符号表达式）
- eval: evaluation(求值）
- 命令的含义：对距离光标最近一个符号表达式求值
** 1.7 变量(variable)
**** 1. 一个符号可以同时具有一个函数定义和一个值，各自独立
- 在没有括号或者在非操作符位置 返回值
- 有括号并在操作符位置时 返回函数操作
#+BEGIN_SRC lisp
fill-column
(fill-column)
#+END_SRC
- (fill-column) 因为fill-column不是一个定义函数的符号 所以会返回以下错误消息
- eval: Symbol's function definition is void: fill-column
**** 2. 符号无值时的错误消息
#+BEGIN_SRC lisp
(+
#+END_SRC
- error：Symbol's value as variable is void: +
** 1.8 参量(argument)
*** 1.8.1 参量的数据类型
**** 1. concat函数将两个或更多个字符串连接
#+BEGIN_SRC lisp
(concat "acb" "def")
#+END_SRC
**** 2. substring函数有三个参数：字符串 返回值的起始位置 返回值的结束位置
#+BEGIN_SRC lisp
(substring "The quick brown fox jumped" 16 19)
#+END_SRC
*** 1.8.2 作为变量和列表的值的参量
**** 1. 参量可以是一个符号 值是该符号的返回值
#+BEGIN_SRC lisp
(+ 2 fill-column)
#+END_SRC
**** 2. 参量可以是一个列表 值是该列表的返回值
#+BEGIN_SRC lisp
(concat "The " (+ 2 fill-column) " red foxes.")
#+END_SRC
- error: Wrong type argument: sequencep, 82
****** TODO (+ 2 fill-column)返回值为int concat要求string为参数 所以当前列表报错
*** 1.8.5 message函数
**** 1. message函数用于给用户发送消息，参量数目可以变化
#+BEGIN_SRC lisp
(message "print message")
(message "print string input: %s" (buffer-name))
(message "print a number: %d" fill-column)
#+END_SRC
**** 2. 多个参量的例子
#+BEGIN_SRC lisp
(message "He saw %d %s"
	 (- fill-column 34)
	 (concat "red "
		 (substring
		  "the foxed" 4 9)
		 "leaping."))
#+END_SRC
** 1.9 给一个变量赋值
**** 1. 给变量赋值的方法
- set/setq 函数
- let 函数（参考3.6 "let函数")
- 赋值过程用术语表示为：将一个变量绑定到一个值上
*** 1.9.1 使用set函数
**** 1. 将符号flowers的值设置为列表'(rose violet daisy buttercup)
#+BEGIN_SRC lisp
(set 'flowers '(rose violet daisy buttercup))
#+END_SRC
- (rose violet daisy buttercup)作为set函数返回的值显示在屏幕上
- 附带效果：符号flowers被绑定到返回值列表
- 当符号被绑定到列表后，可以对该符号求值，返回绑定的列表
*** 1.9.2 使用setq函数
**** 1. setq相对于set 在变量前自动加单引号
- 以下setq函数等价与set函数
#+BEGIN_SRC lisp
(setq carnivores '(lion tiger leopard))
(set 'carnivores '(lion tiger leopard))
#+END_SRC
**** 2. setq同时用于给不同的变量赋予不同的值
#+BEGIN_SRC lisp
(setq tress '(pine fir oak maple)
      herbivores '(gazelle antelope))
#+END_SRC
**** 3. 赋值函数将符号指向列表
*** 1.9.3 计数
#+BEGIN_SRC lisp
(setq counter 0) ; Let's call this the initializer.
(setq counter (+ counter 1)) ; This is the incrementer.
counter ; This is the counter
#+END_SRC
** 1.11 练习
****** TODO 写一个表达式 当对它求值时 它在回显区输出一条消息
