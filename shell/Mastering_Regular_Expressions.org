* 第一章 正则表达式入门
** 1.1 Egrep元字符
*** 1.1.1 行的开始和结束
- 脱字符号 ^ 代表一行的开始
- 美元符号 $ 代表一行的结束
- 这两个符号匹配的都是位置，而不是具体的字符
*** 1.1.2 字符组 [...]
**** 匹配若干字符之一
- e匹配e a匹配a [ea]匹配e或者a
- 匹配'grey'或者'gray'
#+BEGIN_SRC 
gr[ea]y
#+END_SRC
- 匹配<H1>, <H2>, ...
#+BEGIN_SRC 
<H[123456]>
#+END_SRC
**** 字符组元字符'-'
- '-'在字符组中表示范围：H<1-6>与H[123456]一样
- [0-9]和[a-z]是常用的匹配数字和小写字母的简便方式
- 字符组的多重范围：[0123456789abcdefABCDEF] = [0-9a-fA-F]
- 字符组也可以加符号：[0-9A-Z_!.?]
**** 排除型字符组 [^...]
- 匹配任何不包括在排除型字符组中的字符
- 匹配除了123456以外任何字符
#+BEGIN_SRC 
[^1-6]
#+END_SRC
*** 1.1.3 用点号匹配任意字符
- 匹配'03/19/76'和'03-19-76'
#+BEGIN_SRC 
03.19.76
#+END_SRC
*** 1.1.4 多选结构
**** 匹配任意子表达式
- '|'表示或
- 匹配Bob或Robert
#+BEGIN_SRC 
Bob|Robert
#+END_SRC
- 在上面的组合中，子表达式称为多选分支
- Eg: 'gr[ea]y' = 'gr(e|a)y' 注意方括号和括号
**** 多选结构和字符组的区别
- 字符组只能匹配文本中的单个字符
- 多选结构可以匹配任意长度的文本
- 匹配以From: /Subject: /Date: 开头的文本
#+BEGIN_SRC 
^(From|Subject|Date): 
#+END_SRC
*** 1.1.5 忽略大小写
- grep -i 参数忽略大小写
*** 1.1.6 单词分界符
**** 元字符序列
- '\<'和'\>'分别匹配单词的开头和结束位置
- 匹配以cat开头的单词
#+BEGIN_SRC 
\<cat
#+END_SRC
*** 1.1.7 小结
| 元字符 | 名称         | 匹配对象                     |
|--------+--------------+------------------------------|
| .      | 点号         | 单个任意字符                 |
| [...]  | 字符组       | 列出的任意字符               |
| [^...] | 排除型字符组 | 未列出的任意字符             |
| ^      | 脱字符       | 行的起始位置                 |
| $      | 美元符       | 行的结束位置                 |
| \<     | 反斜线-小于  | 单词的起始位置               |
| \>     | 反斜线-大于  | 单词的结束位置               |
| ｜     | 竖线         | 匹配分隔两边的任意一个表达式 |
| (...)  | 括号         | 限制竖线的作用范围           |
*** 1.1.8 可选项元素
- '?'表示可选项，对紧邻的左侧元素有效
- 匹配'color'和'colour'
#+BEGIN_SRC 
colou?r
#+END_SRC
- 'u?'表示u可有可没有
- 匹配'4'和'4th'
#+BEGIN_SRC 
4(th)?
#+END_SRC
*** 1.1.9 其他量词：重复出现
- '+'表示紧邻的左侧元素出现一次或多次
- '*'表示紧邻的左侧元素出现任意多次，或者不出现
- '?''+''*'统称为量词
**** 匹配HTML规范的tag
- 在tag结尾的>字符之前，可以出现任意长度的空格，例如<H3 >, <H4   >
#+BEGIN_SRC 
H[1-6] *
#+END_SRC
**** 匹配<HR SIZE=14>
- '>'前可以出现任意多个空格
- '='两边可以出现任意多个空格
- HR和SIZE间最少有一个空格
#+BEGIN_SRC 
<HR +SIZE *= *14 *>
#+END_SRC
**** 匹配数值
- 数值是由一位或多位数字构成，例如3，12，897
#+BEGIN_SRC 
[0-9]+
#+END_SRC
**** 匹配<HR SIZE=xx> 任意数值
#+BEGIN_SRC 
<HR +SIZE *= *[0-9]+ *>
#+END_SRC
**** 匹配<HR>
#+BEGIN_SRC 
<HR( +SIZE *= *[0-9]+)? *>
#+END_SRC
**** 小结
| 量词符号 | 次数下限 | 次数上限 | 含义                           |
|----------+----------+----------+--------------------------------|
| ?        | None     | 1        | 可以出现一次，或者不出现       |
| *        | None     | None     | 可以出现无数次，或者不出现     |
| +        | 1        | None     | 可以出现无数次，但最少出现一次 | 
**** 规定重现次数的范围：区间
- 区间量词：'...{min,max}'
- 匹配1-5个字母
#+BEGIN_SRC 
[a-zA-Z]{1,5}
#+END_SRC
*** 1.1.10 括号及反向引用
- 反向引用：匹配与表达式先前部分匹配的同样的文本
**** Eg.: 逐步匹配'the the'
- 'the the'会错误匹配到'the theory'
- 匹配'the the'
#+BEGIN_SRC 
\<the the\>
#+END_SRC
- 匹配第一个the为任意字符
#+BEGIN_SRC 
[A-Za-z]+
#+END_SRC
- 匹配第二个the为元字符序列
#+BEGIN_SRC 
\<([A-Za-z] +) +\1\>
#+END_SRC
**** 多个括号和多个反向引用
- 匹配'A3 A3'
#+BEGIN_SRC 
([A-Z])([0-9]) +\1\2
#+END_SRC
*** 1.1.11 神奇的转义
- 在元字符前加反斜线，恢复元字符本身的符号含义
** 1.2 基础知识扩展
*** 1.2.1 更多的例子
**** 变量名
- 标识符只包含字母，数字和下划线，并且不能以数字开头
#+BEGIN_SRC 
[a-zA-Z_][a-zA-Z_0-9]*
#+END_SRC
**** 引号内的字符串
- '[^"]'匹配除双引号以外的任意字符
#+BEGIN_SRC 
"[^"]*"
#+END_SRC
**** 美元金额（可能包含小数）
#+BEGIN_SRC 
\$[0-9]+(\.[0-9][0-9])?
#+END_SRC
**** HTTP/HTML URL
- 常见的URL: http://hostname/path.html
- 连字符'-'放在字符组开头，保证它是一个普通字符，而不是用来表范围
#+BEGIN_SRC 
\<http://[-a-z0-9_.:]+/[-a-z0-9_:@&?=+,.!/~*%$]*\.html?\>
\<http://[^ ]*\.html?\>
#+END_SRC
**** 表示时刻的文字 例如'9:17am'或者'12:30pm'
#+BEGIN_SRC 
(1[012]|[0-9]):[0-5][0-9] (am|pm)
#+END_SRC
**** 24小时制的时间
#+BEGIN_SRC 
(0?[0-9]|1[0-9])|2[0-3]):[0-5][0-9]
([01]?[0-9])|2[0-3]):[0-5][0-9]
#+END_SRC
* 第二章 入门示例拓展
** 2.1 Perl简单入门
- 普通变量以'$'开头，保存一个数值或者任意长度的文本
- 执行文件为*.el
- '#'到句尾为注释
** 2.2 使用正则表达式匹配文本
*** 2.2.1 perl简单代码
- 以下代码检查$reply中字符串是否全部由数字构成
- m/.../表示对正则表达式进行什么操作 参数m表示'正则表达式匹配'
- =~连接正则表达式和操作对象 读作'匹配'
#+BEGIN_SRC perl
$reply = 20;
if ($reply =~ m/^[0-9]+$/) {
    print "only digits\n";
} else {
    print "not noly digits\n";
}
#+END_SRC
- 用户输入
#+BEGIN_SRC perl
print "Enter a temperature in Celsius:\n";
$celsius = <STDIN>; #从用户处接受一个输入
chomp($celsius); #去掉$celsius后面的换行符

if ($celsius =~ m/^[0-9]+$/) {
    $fahrenheit = ($celsius * 9 / 5) + 32;
    print "$celsius C is $fahrenheit F\n";
} else {
    print "Expecting a number, so I don't understand \"$celsius\".\n";
}
#+END_SRC
** 2.3 向更实用的程序前进
*** 2.3.1 匹配负数和小数
#+BEGIN_SRC 
^[-+]?[0-9]+(\.[0-9]*)?$
#+END_SRC
** 2.4 成功匹配的附带作用
*** 2.4.1 $x获取匹配成功后的文本
- '\1'指向之前匹配的文本 匹配成功后 $1引用该文本
#+BEGIN_SRC perl
print "Enter a temperature in Celsius:\n";
$input = <STDIN>; #从用户处接受一个输入
chomp($input); #去掉$celsius后面的换行符

if ($input =~ m/^([-+]?[0-9]+)([CF])$/) { #注意表达式中的括号用于$1，$2赋值

    #成功匹配后 $1保存数字 $2保存'C'或者'F'
    $InputNum = $1; #把数据保存到变量中
    $type = $2; #保存输入数据类型

    if ($type eq "C") {
	$celsius = $InputNum;
	$fahrenheit = ($celsius * 9 / 5) + 32;
    } else {
	$fahrenheit = $InputNum;
	$celsius = ($fahrenheit - 32) * 5 / 9;
    }
    printf "%.2f C is %.2f F\n", $celsius, $fahrenheit;
}else {
    print "Expecting a number followed by \"C\" or \"F\",\n";
    print "so I don't understand \"$input\".\n";
}
#+END_SRC
** 2.5 错综复杂的正则表达式
*** 2.5.1 增加浮点数
#+BEGIN_SRC 
^([-+]?[0-9]+(\.[0-9]*)?)([CF])$
#+END_SRC
*** 2.5.2 括号和赋值$x
- 根据左括号依次赋值
#+BEGIN_SRC 
$1 = ([-+]?[0-9]+(\.[0-9]*)?)
$2 = (\.[0-9]*)
$3 = ([CF])
#+END_SRC
*** 2.5.3 匹配空白字符（空格 制表符）
#+BEGIN_SRC 
[ \t]*
#+END_SRC
*** 2.5.4 非捕获型括号'(?:...)'
- 只用于分组，不赋值给$x
#+BEGIN_SRC 
^([-+]?[0-9]+(?:\.[0-9]*)?)([CF])$
$1 = ([-+]?[0-9]+(\.[0-9]*)?)
$2 = ([CF])
#+END_SRC
*** 2.5.5 用\s匹配所有'空白'
- '\s'表示所有空白字符包括空格符 制表符 换行符和回车符
#+BEGIN_SRC 
\s*
#+END_SRC
*** 2.5.6 i修饰符
- Perl中把i放在m/.../结构后表示不区分大小写
#+BEGIN_SRC 
$input =~ m/^([-+]?[0-9]+(?:\.[0-9]*)?)\s*([CF])$/i
#+END_SRC
** 2.6 Perl中的正则表达式
*** 2.6.1 $variable =~ m/regex/
- m表示匹配(match)
- 斜线标注正则表达式的边界
- m/.../作为一个单元 返回true或者false
*** 2.6.2 Perl的正则表达式简记法
| 符号 | 含义                              |
|------+-----------------------------------|
| \t   | 制表符                            |
| \n   | 换行符                            |
| \r   | 回车符                            |
| \s   | 任何'空白'字符                    |
| \S   | 除'\s'外的任何字符                |
| \w   | [a-zA-Z0-9]                       |
| \W   | 除'\w'外的任何字符 即[^a-zA-Z0-9] |
| \d   | 数字 即[0-9]                      |
| \D   | 除'\d'外的任何字符 即[^0-9]       |
** 2.8 全局替换(global replacement)
- s/.../.../g
- 'g'表示当前文件满足匹配条件的文本全部替换
** 2.9 休整股票价格
- 保留小数点后两位数字
- 如果第三位不为零 也需要保留
- 删除其他数字
- '12.3750000092' -> '12.375'
- '12.375' -> '12.375'
- '35.500' -> '35.50'
#+BEGIN_SRC 
$price =~ s/(\.\d\d[1-9]?)\d*/$1/
#+END_SRC
** 2.10 自动的编辑操作
- 在文件中用'read'替换'sysread'
- 参数'e'表示整个程序接在命令的后面
- 参数'p'表示对目标文件每一行进行查找和替换
- 参数'i'表示将替换的结果写回到文件
#+BEGIN_SRC 
% perl -p -i -e 's/sysread/read/g' file
#+END_SRC
** 2.11 处理邮件的小工具
*** E-mail Message范本
#+BEGIN_SRC 
From elvis Thu Feb 29 11:15 2007
Received: from elvis@localhost by tabloid.org (8.11.3) id KA8CMY
Received: from tabloid.org by gateway.net (8.12.5/2) id N8XBK
To: jfriedl@regex.info (Jeffrey Friedl)
From: elvis@tabloid.org (The King)
Date: The, Feb 29 2007 11:15
Message-Id: <20070229399939.KA8CMY@tabloid.org>
Subject: Be seein' ya around
Replay-To: elvis@hh.tabloid.org
X-Mailer: Madam Zelda's Psychic Orb [version 3.7 PL92]

Sorry I haven't been around lately.
Elvis
#+END_SRC
