* 第二章 入门
** 2.1 脚本编程语言和编译型语言的差异
*** 2.1.1 编译型语言
- 许多中型，大型程序都是由编译型语言写成，如C,C++,Java
- 此类程序从源码转换为目标代码，即可由计算机执行
- 好处：高效
- 缺点：运行于底层，很难执行‘复制文件’的操作
*** 2.1.2 解释型语言
- 脚本编程语言通常是解释型的，由解释器读入代码，并转换为内部形式执行
** 2.3 一个简单的脚本
*** 2.3.1 命令行执行
- who 当前系统有谁登陆
- wc 字数计算程序（参数l表示计算行数）
- |符号在两个程序中建立连接：who的输出作为wc的输入
#+BEGIN_SRC shell
$ who | wc -l
2
#+END_SRC
*** 2.3.2 文件执行
- cat 在当前目录下创建文件
- chmod 设置文件权限
#+BEGIN_SRC shell
$ cat > nusers     #建立文件，使用cat复制终端的输入
who | wc -l        #程序
C-d                #C-d表示end-of-file
$ chmod +x nusers  #让文件有执行权限
$ ./nusers         #执行测试
2                  #输出结果
#+END_SRC
** 2.4 位于第一行的#!
- 告知UNIX内核使用哪个shell来执行脚本
- 通常情况如下
#+BEGIN_SRC shell
#! /bin/sh
#+END_SRC
** 2.5 Shell的基本元素
*** 2.5.1 命令与参数
- Shell识别三种基本命令：内建命令，Shell函数和外部命令（子shell)
- 空白隔开命令行的各个组成部分
- 命令名称是第一个项目，后跟选项和参数
- 选项的开头是一个或两个减号(-)
- 分号(;)分隔同一行中的多条命令，顺序执行，前一个完成后，第二个执行
- &符号也可以分隔多条命令，前面的命令会在后台执行，前后两个命令会同时执行
#+BEGIN_SRC shell
$ cd ~/Info/shell/ ; ls -l Classic_Shell_Scripting.org
-rw-r--r--  1 andybao  staff  1710 Sep  1 13:17 Classic_Shell_Scripting.org
#+END_SRC
*** 2.5.2 变量
- 以字母或下划线开头，可以接任意长度的字母、数字或下划线符号
- 赋新值：变量名称＝新值
- 使用变量的值时，变量前加$
- 当值中含有空格，需要加引号
- 将几个变量连接起来时，需要加引号
- 单行可以多次赋值
#+BEGIN_SRC shell
$ myvar=a_long_string #分配变量值
$ echo $myvar         #打印变量值
a_long_string
#+END_SRC
#+BEGIN_SRC shell
$ first=ab middle=cd last=ef      #单行多次赋值
$ full_1="ab cd ef"               #值中包含空格
$ full_2="$first $middle $last"   #连接变量
$ echo $full_1
ab cd ef
$ echo $full_2
ab cd ef
#+END_SRC
*** 2.5.5 基本的I/O重定向
- 标准输入／输出：程序应该有来源端，目的端以及报告问题
- 默认的标准输入，标准输出以及标准错误输出都是终端
**** 2.5.5.1 重定向与管道
***** 以左尖括号(<)改变标准输入
#+BEGIN_SRC shell
tr -d '\r' < dos-file.txt #dos-file.txt作为命令tr的输入
#+END_SRC
***** 以右尖括号(>)改变标准输出
- 当目标文件不存在时，会新建一个
- 当目标文件存在时，会被覆盖，原有数据丢失
#+BEGIN_SRC shell
tr -d '\r' < dos-file.txt > UNIX-file.txt
#+END_SRC
***** 以>>附加到文件
- 当目标文件不存在时，会新建一个
- 当目标文件存在时，不覆盖，在文件结尾处追加数据
#+BEGIN_SRC shell
for f in dos-file*.txt
do
    tr -d '\r' < $f >> big-UNIX-file.txt
done
#+END_SRC
***** 以|建立管道
- 管道将两个运行中的程序衔接
- 第一个程序的标准输出成为第二个程序的标准输入
#+BEGIN_SRC shell
tr -d '\r' < dos-file.txt | sort > UNIX-file.txt
#+END_SRC
**** 2.5.5.2 特殊文件：/dev/null与/dev/tty
***** /dev/null
- 位桶(bit bucket)
- 写数据时，返回写入成功
- 读数据时，返回文件结束符号(end-of-file)
#+BEGIN_SRC shell
if grep pattern my file > /dev/null
then
    ...
else
    ...
fi
#+END_SRC
***** /dev/tty
- 对于终端的操作
#+BEGIN_SRC shell
printf "Enter new password: " #提示输入密码
stty -echo                    #关闭自动打印输入字符的功能
read pw < /dev/tty            #读取密码
printf "Enter again: "        #提示再输入一次密码
read pw2 < /dev/tty           #再读取一次以确认
stty echo                     #打开自动打印输入字符的功能
...
#+END_SRC
*** 2.5.6 基本命令查找
- Shell会沿着查找路径$PATH来寻找命令
** 2.6 访问Shell脚本的参数
- 位置参数是Shell脚本的命令行参数，也可以是Shell函数中的函数参数
- 各参数都以整数命名，超过9时，需要放在花括号中
***** 命令行中查找指定用户
#+BEGIN_SRC shell
$ who | grep andybao
andybao  console  Sep  1 07:18 
#+END_SRC
***** 脚本中查找指定用户
- 脚本运行是第一个参数即查找目标
#+BEGIN_SRC shell
#脚本
#! /bin/sh
# finduser --- 查看第一个参数所指定的用户是否登陆
who | grep $1
C-d
#+END_SRC
#+BEGIN_SRC shell
#脚本运行
$ chmod +x finduser   #设置执行权限
$ ./finduser andybao  #输入参数 运行脚本
andybao  console  Sep  1 07:18 
#+END_SRC
** 2.7 简单的执行跟踪
- set -x 打开执行跟踪
- set +x 关闭执行跟踪
- Shell会显示每个被执行的命令，并在前面显示一个加号+
***** 命令行中执行跟踪
#+BEGIN_SRC shell
sh -x nusers #打开执行跟踪
+ who        #被跟踪的命令
+ wc -l
       1     #输出 
#+END_SRC
***** 脚本中执行跟踪
#+BEGIN_SRC shell
#脚本
#! /bin/sh

set -x        #打开执行跟踪
echo 1st echo #逻辑代码
set +x        #关闭执行跟踪
echo 2nd echo #逻辑代码
#+END_SRC
#+BEGIN_SRC shell
$ chomd +x trace1.sh
$ ./trace1.sh
+ echo 1st echo #被跟踪的第一个命令
1st echo        #第一个命令的输出
+ set +x        #关闭执行跟踪的命令也会被跟踪
2nd echo        #第二个命令没有被跟踪，直接得到输出
#+END_SRC
* 第三章 查找和替换
** 3.1 查找文本
- BRE: 基本正则表达式 (Basic Regular Expression)
- ERE: 扩展正则表达式 (Extended Regular Expression)
- POSIX: 可移植操作系统接口 (Portable Operating System Interface)
**** 用于查找文本文件的三种程序
- grep: 使用BRE
- egrep: 使用ERE，相对消耗更多的资源
- fgrep: 匹配固定字符串
*** 3.1.1 简单的grep
- 如果匹配模式不含有正则表达式的meta字符，grep默认-F模式，即查找固定字符串
#+BEGIN_SRC shell
who | grep andybao
#+END_SRC
** 3.2 正则表达式
**** grep
- gerp [options...] /pattern-spec/ [files...]
- 匹配一个或多个模式的文本行
- '-E' ERE匹配
- '-F' 固定字符串匹配
- '-i' 忽略大小写
**** 什么是正则表达式
- 正则表达式用于匹配特定规则的文本
*** 3.2.1 POSIX BRE与ERE的meta字符
| 元字符  | 含义                                   | BRE                            | ERE                  |
|---------+----------------------------------------+--------------------------------+----------------------|
| \       | 转义符，关闭或者打算后续字符的特殊意义 | x                              | x                    |
| .       | 单个字符，NUL除外                      | x                              | x                    |
| *       | 任意多个左侧字符                       | 如果是第一个字符，没有特殊意义 | 可以匹配表达式       |
| ^       | 行或者字符串的起始位置                 | 只在第一个字符有特殊意义       | 任何位置都有特殊意义 |
| $       | 行或者字符串的结束位置                 | 只在最后一个字符有特殊意义     | 任何位置都有特殊意义 |
| [...]   | 方括号中的内容                         | x                              | x                    |
| \{n,m\} | 左侧字符出现次数，n-m次                | x                              |                      |
| {n,m}   | 左侧字符出现次数，n-m次                |                                | x                    |
| +       | 左侧表达式一个或多个实例               |                                | x                    |
| ?       | 左侧表达式一个或多个实例               |                                | x                    |
| ｜      | 左右两个表达式逻辑或                   |                                | x                    |
**** 3.2.1.1 POSIX方括号表达式
***** 字符集
- [:...:]
- 括号内的关键字描述不同的字符集
- POSIX字符集
| 类别      | 匹配字符     | 类别       | 匹配字符     |
|-----------+--------------+------------+--------------|
| [:alnum:] | 数字         | [:lower:]  | 小写字母     |
| [:alpha:] | 字母         | [:print:]  | 可显示的字符 |
| [:blank:] | 空格和制表符 | [:punct:]  | 标点符号     |
| [:cntrl:] | 控制字符     | [:space:]  | 空白         |
| [:digit:] | 数字         | [:upper:]  | 大写字母     |
| [:graph:] | 非空格       | [:xdigit:] | 十六进制数字 |
***** 排序符号
- [.xxx.]
- 将多字符序列视为一个单位
#+BEGIN_SRC shell
[.sh.] #'sh'被认为是一个单位
#+END_SRC
***** 等价字符集
- [:...:]
- 匹配语言中的特殊字符
#+BEGIN_SRC shell
[:e:] #匹配例如法语中的'é ê ë è'
#+END_SRC
*** 3.2.2 基本正则表达式(BRE)
**** 3.2.2.2 后向引用
#+BEGIN_SRC shell
\(...\)\digit
\(why\).*\1 #一行里重复出现两个why
#+END_SRC
**** 3.2.2.3 单个表达式匹配多字符
- n,m的值介于0至RE_DUP_MAX之间
#+BEGIN_SRC shell
getconf RE_DUP_MAX #查询RE_DUP_MAX值
\{n\}   #左侧表达式所得结果出现n次
\{n,\}  #左侧表达式所得结果至少出现n次
\{n,m\} #左侧表达式所得结果出现n-m次
#+END_SRC
*** 3.2.6 在文本文件里进行替换
- 流编辑器sed(Stream Editor)
*** 3.2.7 sed基本用法

