* 第一章 列表处理 (List Processing)
**** 1. Lisp: LISt Processing即列表处理，和通过把列表放置在括号之间来处理列表（甚至是列表的列表）的编程语言。
**** 2. 括号标记了列表的边界
**** 3. 一个列表用单引号或表示标记开头
** 1.1 Lisp列表
**** 1. 数据和程序都是以同样的方式表示，用空格分隔
#+BEGIN_SRC lisp
'(this is has (a list inside of it))
#+END_SRC
*** 1.1.1 Lisp原子(atom)
**** 1. 在一个列表中，原子由空格分隔，可以紧接着括号
**** 2. 原子不可分割
***** TODO Todo: Question: 一个列表作为另一个列表的原子 怎么理解不可分隔？
**** 3. 列表的三种可能的组成方式
- 括号和括号中由空格分隔的原子
- 括号和括号中的其他列表
- 括号和括号中其他列表和原子
**** 4. 空列表()
- 空列表同时看作既是一个原子，也是一个列表
**** 5. 原子和列表被称作符号表达式(symbolic expression)
**** 6. 列表中双引号中的文本被认为是一个原子
- 这种原子被成为string
#+BEGIN_SRC lisp
'(this list includes "text between quotation marks.")
#+END_SRC
** 1.2 运行一个程序
**** 1. 任何列表都是一个准备运行的程序
**** 2. 运行一个列表（术语称为：对一个列表求值）会出现以下三种结果之一
- 返回列表本身
- 返回出错消息
- 将列表中第一个符号当作命令操作符，执行命令,返回结果
**** 3. 单引号'
- 称为引用（quote)
- 当单引号位于列表最前面，表示对当前列表不做任何操作，保持原样使用
#+BEGIN_SRC lisp
'(返回当前列表)
#+END_SRC
- 如果列表最前面没有单引号，列表中第一个符号作为要执行的命令（术语称为：函数）
#+BEGIN_SRC lisp
(+ 2 2)
#+END_SRC
** 1.3 产生错误消息
#+BEGIN_SRC lisp
(this is an unquoted list)
#+END_SRC
- Symbol's function definition is void: this
- 'this'是一个没有定义的操作符
** 1.4 操作符和函数
**** 1. 操作符可以被定义为执行某个函数
**** 2. 一个符号只能定义为一个函数的操作符
** 1.5 Lisp解释器
**** 1. 解释器对列表求值的流程
- 查看列表是否以单引号开始
- 如果是 返回当前列表 如果不是 查看列表第一个元素 是否是一个函数定义
- 如果是 执行函数 返回结果 如果不是 返回错误信息
**** 2. 三种复杂情况
****** TODO Todo: 定义晦涩 需要进一步在实践中学习‘变量’‘特殊表(special form)’
**** 3. 字节编译
- 源文件为*.el，字节编译后的文件为*.elc
** 1.6 求值
**** 1. 解释器返回结果的同时可以做另外的动作，称为附带效果(side effect)
****** DOING Todo: 学习附带效果的具体代码
       - State "DOING"      from "TODO"       [2015-08-23 Sun 11:00]
例一：1.9.1 使用set函数
**** 2. 对内部列表求值
- 内层列表先被求值，结果用于外层列表
#+BEGIN_SRC lisp
(+ 2 (+ 3 3))
#+END_SRC
**** 3. 命令eval-last-sexp的含义
- 快捷方式：C-x C-e
- sexp: symbol expression(符号表达式）
- eval: evaluation(求值）
- 命令的含义：对距离光标最近一个符号表达式求值
** 1.7 变量(variable)
**** 1. 一个符号可以同时具有一个函数定义和一个值，各自独立
- 在没有括号或者在非操作符位置 返回值
- 有括号并在操作符位置时 返回函数操作
#+BEGIN_SRC lisp
fill-column
(fill-column)
#+END_SRC
- (fill-column) 因为fill-column不是一个定义函数的符号 所以会返回以下错误消息
- eval: Symbol's function definition is void: fill-column
**** 2. 符号无值时的错误消息
#+BEGIN_SRC lisp
(+
#+END_SRC
- error：Symbol's value as variable is void: +
** 1.8 参量(argument)
*** 1.8.1 参量的数据类型
**** 1. concat函数将两个或更多个字符串连接
#+BEGIN_SRC lisp
(concat "acb" "def")
#+END_SRC
**** 2. substring函数有三个参数：字符串 返回值的起始位置 返回值的结束位置
#+BEGIN_SRC lisp
(substring "The quick brown fox jumped" 16 19)
#+END_SRC
*** 1.8.2 作为变量和列表的值的参量
**** 1. 参量可以是一个符号 值是该符号的返回值
#+BEGIN_SRC lisp
(+ 2 fill-column)
#+END_SRC
**** 2. 参量可以是一个列表 值是该列表的返回值
#+BEGIN_SRC lisp
(concat "The " (+ 2 fill-column) " red foxes.")
#+END_SRC
- error: Wrong type argument: sequencep, 82
****** TODO Todo: (+ 2 fill-column)返回值为int concat要求string为参数 所以当前列表报错
*** 1.8.5 message函数
**** 1. message函数用于给用户发送消息，参量数目可以变化
#+BEGIN_SRC lisp
(message "print message")
(message "print string input: %s" (buffer-name))
(message "print a number: %d" fill-column)
#+END_SRC
**** 2. 多个参量的例子
#+BEGIN_SRC lisp
(message "He saw %d %s"
	 (- fill-column 34)
	 (concat "red "
		 (substring
		  "the foxed" 4 9)
		 "leaping."))
#+END_SRC
** 1.9 给一个变量赋值
**** 1. 给变量赋值的方法
- set/setq 函数
- let 函数（参考3.6 "let函数")
- 赋值过程用术语表示为：将一个变量绑定到一个值上
*** 1.9.1 使用set函数
**** 1. 将符号flowers的值设置为列表'(rose violet daisy buttercup)
#+BEGIN_SRC lisp
(set 'flowers '(rose violet daisy buttercup))
#+END_SRC
- (rose violet daisy buttercup)作为set函数返回的值显示在屏幕上
- 附带效果：符号flowers被绑定到返回值列表
- 当符号被绑定到列表后，可以对该符号求值，返回绑定的列表
*** 1.9.2 使用setq函数
**** 1. setq相对于set 在变量前自动加单引号
- 以下setq函数等价与set函数
#+BEGIN_SRC lisp
(setq carnivores '(lion tiger leopard))
(set 'carnivores '(lion tiger leopard))
#+END_SRC
**** 2. setq同时用于给不同的变量赋予不同的值
#+BEGIN_SRC lisp
(setq tress '(pine fir oak maple)
      herbivores '(gazelle antelope))
#+END_SRC
**** 3. 赋值函数将符号指向列表
*** 1.9.3 计数
#+BEGIN_SRC lisp
(setq counter 0) ; Let's call this the initializer.
(setq counter (+ counter 1)) ; This is the incrementer.
counter ; This is the counter
#+END_SRC
** 1.11 练习
****** TODO Todo: 写一个表达式 当对它求值时 它在回显区输出一条消息
* 第二章 求值实践 (Practicing Evaluation)
**** 1. 每当在Emacs Lisp中发出一个编辑命令时，比如移动光标，就是在对一个表达式求值
**** 2. 键入普通文本是对Emacs Lisp函数self-insert-command求值
**** 3. 通过键入键序列进行求值的函数被称为交互函数，或者是命令
- 如果使一个函数变成交互函数：参见3.3节“使函数称为交互函数”
** 2.1 缓冲区名 (Buffer Names)
**** 1. buffer-name和buffer-file-name
- (buffer-name)返回当前缓冲区名称，通常与文件名相同
- (buffer-file-name)返回文件完整的路径名
- 文件记录在硬盘上，缓冲区包含从文件拷贝的信息，对缓冲区的修改不会影响文件，除非保存缓冲区
#+BEGIN_SRC lisp
(buffer-name) -> "2_Practicing_Evaluation.org"
(buffer-file-name) -> "/Users/andybao/Info/andy-lisp/2_Practicing_Evaluation.org"
#+END_SRC
**** 2. Lisp中nil表示空值，布尔代数的假，空列表()的同义语
**** 3. C-u C-x C-e
- 表达式的值出现在缓冲区（相对于C-x C-e 值出现在回显区）
** 2.2 获得缓冲区 (Getting Buffers)
**** 1. 函数current-buffer
- (buffer-name)返回缓冲区的名字
- (current-buffer)返回缓冲区本身，即缓冲区对象（实体）
#+BEGIN_SRC lisp
(current-buffer) -> #<buffer 2_Practicing_Evaluation.org>
#+END_SRC
**** 2. 函数other-buffer
- 返回最近使用过的缓冲区
#+BEGIN_SRC lisp
(other-buffer) -> #<buffer *Messages*>
#+END_SRC
** 2.3 切换缓冲区 (Switching Buffers)
**** 1. 函数switch-to-buffer
- C-x b会将当前窗格切换至其它缓冲区，以下为其调用的表达式
#+BEGIN_SRC lisp
(switch-to-buffer (other-buffer)) -> #<buffer *Messages*> 
#+END_SRC
**** 2. 函数set-buffer
- 将焦点切换到另一个缓冲区，但不在屏幕上显示
** 2.4 缓冲区大小和位点的定位 (Buffer Size and the Location of Point)
**** 1. 函数buffer-size返回当前缓冲区的大小，即字符数的统计
#+BEGIN_SRC lisp
(buffer-size) -> 1284
#+END_SRC
**** 2. 光标所在位置称为point
- (point)返回当前光标所在位置，即从当前缓冲区首字符到光标所在位置间的字符数
- (point-min)返回当前缓冲区位点最小可能值
- (piont-max)返回当前缓冲区位点最大可能值，即缓冲区总字符数
#+BEGIN_SRC lisp
(point) -> 1461
(point-min) -> 1
(point-max) -> 1509
#+END_SRC

* 第三章 如何编写函数定义 (How To Write Function Definitions)
**** 1. 有函数定义的符号称为函数
- 基本函数由C语言编写
** 3.1 定义宏(macro)的关键字defun 
**** 1. 以defun为首原子的lisp表达式称为宏
- 宏对一个符号进行函数定义
**** 2. 由defun定义的函数最多有五个部分
- 符号名，函数定义所依附的符号
- 参数列表，如果没有参数，放置一个空列表
- 描述文档（可选）
- 表达式（可选），用于通过M-x和该表达式调用宏，或者设置快捷键同理
- 函数代码
**** 3. 宏定义模版
#+BEGIN_SRC lisp
(defun function-name (arguments...)
  "optional-documentation..."
  (interactive argument-passing-info) ;optional
  body...)
#+END_SRC
**** 4. 宏定义示例
- (number)为参数列表，这个例子列表中只有一个元素
- 参数列表中的参数名是私有的
- "Mul..."为文档字符串，第一行是一个完整句子，如果有第二行，不要缩进
- C-h f (describe-function)用于查看文档字符串
#+BEGIN_SRC lisp
(defun multiply-by-seven (number)
  "Multiply NUMBER by seven."
  (* 7 number))
-> multiply-by-seven
(multiply-by-seven 3) -> 21 ;宏的使用示例
#+END_SRC
** 3.2 安装宏
**** 1. 对宏求值，返回符号名，即可使用直到当前Emacs退出
**** 2. 关于Emacs启动时自动加载代码，参考3.5节“永久安装代码”
** 3.3 使函数改变为交互函数
**** 1. 在函数文档后增加以interactive为首原子的列表可以使函数变为交互函数
**** 2. 交互函数可以使用M-x (function name)或绑定键序列来调用，称为用交互的方法调用函数
**** 3. 用交互的方式调用函数，函数的返回值不回自动显示在回显区
**** 4. 安装以下函数定义，即求值(C-x C-e)，然后C-x /number/ M-x multiply-by-seven运行
#+BEGIN_SRC lisp
(defun multiply-by-seven (number)
  "Multiply NUMBER by seven."
  (interactive "p")
  ;"p"表示要传送一个前缀参量给当前函数，并把这个值当做函数的参数，这个参数是一个数值
  ;"p"是固定的符号
  (message "The result is %d" (* 7 number)))
  ;上述message函数打印出的文本不带引号，因为它嵌在函数中，打印文本是附带效果显示
  ;对比下列message函数打印的文本带引号，因为当前文本是函数返回的值
  (message "The result is 21")
#+END_SRC
** 3.4 interactive函数的不同选项
- 3.3.4示例中的'p'是interactive的参数，表示输入一个数字
**** 1. Emacs有多于20个为interactive定义好的字符，可以设置一个或多个输入格式作为参数
- 参考<Gun Emacs Lisp技术手册>中"interactive的控制符"
**** 2. 参数示例
- 'r' 位点所在区域的开始值和结束值
- 'B' 缓冲区名字
**** 3. 多个参数
- 参数符号间用'\n'隔开，与函数参数列表对应，依次输入
- append-to-buffer函数和下列示例相像，参考4.4节"append-to-buffer函数的定义".
#+BEGIN_SRC lisp
(defun name-of-function (buffer start end)
  "documentation..."
  (interactive "BAppend to buffer: \nr")
  body-of-function...)
#+END_SRC
**** 4. 没有参数
- 直接放置表达式(interactive)，mark-whole-buffer函数就是这种情况
**** 5. 使用自定义的参数符号
- 参考<Gun Emacs Lisp技术手册>中"使用interactive"
** 3.5 永久的安装代码
**** 1. 在对一个函数求值来安装它的时候，生命周期会保持到Emacs退出
**** 2. Emacs启动时，自动安装函数的几种方法
- 将代码放在'.emacs'文件中（参考16章"配置你的'.emacs'文件")
- 将函数定义放在一个或者多个文件中，使用load函数求值（参考16.8节"加载文件")
- 将函数放在'site-init.el'文件中
** 3.6 let函数
**** 1. let用于将一个符号绑定到一个值上，该局部变量只在当前表达式中有效
*** 3.6.1 let表达式模版
#+BEGIN_SRC lisp
(let ((variable value)
      (variable value)
      ...)
      body...)
#+END_SRC
*** 3.6.2 let表达式示例
#+BEGIN_SRC lisp
(let ((zebra 'stripes)
      (tiger 'fierce))
  (message "One kind of animal has %s and another is %s."
	   zebra tiger))
-> "One kind of animal has stripes and another is fierce."
#+END_SRC
*** 3.6.3 let语句中未初始化的变量
**** 1. 未初始化的符号将被赋予nil
#+BEGIN_SRC lisp
(let ((birch 3) ;数字本身就是值，所以不用加引号
      (pine)
      (fir)
      (oak 'some))
  (message
   "Here are %d variables with %s, %s, and %s value."
   birch pine fir oak))
-> "Here are 3 variables with nil, nil, and some value."
#+END_SRC
** 3.7 if特殊表
**** 1. if的格式
#+BEGIN_SRC lisp
(if true-or-false-test
    action-to-carry-out-if-test-is-true)
#+END_SRC
**** 2. if的示例_1
#+BEGIN_SRC lisp
(if (> 5 4)
    (message "5 is greater than 4"))
-> "5 is greater than 4"
#+END_SRC
**** 3. if的示例_2
#+BEGIN_SRC lisp
(defun type-of-animal (char)
  "Print message in echo area depending on char"
  (if (equal char 'fierce)
      (message "Is's a tiger")))
-> type-of-animal
(type-of-animal 'fierce) -> "Is's a tiger"
(type-of-animal 'zebra) -> nil
#+END_SRC
** 3.8 if-then-else
**** 1. 格式
#+BEGIN_SRC lisp
(if true-or-false-test
    action-to-carry-out-if-test-is-true)
  action-to-carry-out-if-test-is-flase)
#+END_SRC
**** 2. 示例
#+BEGIN_SRC lisp
(defun type-of-animal (char)
  "Print message in echo area depending on char"
  (if (equal char 'fierce)
      (message "Is's a tiger")
    (message "It's not fierce")))
(type-of-animal 'fierce) -> "Is's a tiger"
(type-of-animal 'zebra) ->  "It's not fierce"
#+END_SRC
** 3.9 lisp中的真与假
**** 1. nil与()为假，其余全部为真
** 3.10 save-excursion函数
**** 1. save-excursion保存位点和标记的当前位置
- 位点(point)是光标所在位置前一个字符
- 标记(mark)通过命令设置 C-@
- 位点和标记之间的缓冲区称为域(region)
****** TODO 过于晦涩 看不懂 复习时再看
