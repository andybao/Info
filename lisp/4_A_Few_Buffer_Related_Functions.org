* 第四章 与缓冲区有关的函数 (A Few Buffer-Related Functions)
** 4.1 查找更多的信息
- C-h f /fun_name/ RET: 返回函数 /fun_name/ 的文档
- C-h v /variable/ RET: 返回变量 /variable/ 的文档
*** 4.1.1 在源代码文件中查看一个函数
- 使用find-tags函数(快捷键M-.)
- 需要定义一个标记表(tags table)，参考12.5节
** 4.2 简化的begining-of-buffer函数
#+BEGIN_SRC lisp
(defun simplified-begining-of-buffer ()
  "Move point to the begining of the buffer;
leave mark at previous position."
  (interactive)
  (push-mark) ;标记当前光标位置并加入标记环, C-x C-x可以返回到该标记
  (goto-char (point-min)))
#+END_SRC
** 4.3 mark-whole-buffer函数的定义
- 快捷键C-x h
#+BEGIN_SRC lisp
(defun mark-whole-buffer ()
  "Put point at begining and mark at end of buffer"
  (interactive)
  (push-mark (point))
  (push-mark (point-max))
  (goto-char (point-min)))
#+END_SRC
** 4.4 append-to-buffer函数的定义
- 域：缓冲区中介于位点和标记之间的区域
- 从当前缓冲区中拷贝一个域到一个指定的缓冲区
- insert-buffer-substring函数：从缓冲区提取一部分作为字符串，插入到另一个缓冲区
#+BEGIN_SRC lisp
(defun append-to-buffer (buffer start end)
  "Append to specified buffer the text of the region.
  It is inserted into that buffer before its point."
  (interactive "BAppend to buffer: \nr")
  (let ((oldbuf (current-buffer))) ;oldbuf前的两个括号参考3.6.1
    (save-excursion
      (set-buffer (get-buffer-create buffer)) ;set-buffer参考2.3.2
      (insert-buffer-substring oldbuf start end))))
#+END_SRC
*** 4.4.1 append-to-buffer函数的交互表达式
#+BEGIN_SRC lisp
(interactive "BAppend to buffer: \nr")
#+END_SRC
- 表达式有一个位于双引号中的参量，包含两部分，用"\n"分隔
- 第一部分'BAppend to buffer:', 'B'控制符要求输入缓冲区名并传给函数，参量buffer绑定到指定的缓冲区
- 'r'表示第二和第三个参数（start和end）绑定到位点和标记的值上
*** 4.4.3 append-to-buffer函数中的save-excursion表达式
- save-excursion函数保存位点和标记的位置，当函数体中的其他表达式都被求值知乎恢复位点和标记到相应位置
**** (set-buffer (get-buffer-create buffer))
- 'buffer'的值来自interactive函数的参数B
- 'get-buffer-create'函数接受传入的参数，如果是缓冲区名，则获得该缓冲区，如果不是，创建同名缓冲区
- 'set-buffer'函数把焦点转移到参数缓冲区
**** (insert-buffer-substring oldbuf start end)
- 'oldbuf'的值从let函数得到
- 'start'/'end'的值由interactive函数的参数r得到
- 'insert-buffer-substring'函数从第一个参量指定的缓冲区中拷贝一个字符串插入当前的缓冲区
** 4.6 练习
*** 4.6.1 编写simplified-end-of-buffer函数
#+BEGIN_SRC lisp
(defun simplified-end-of-buffer ()
  (interactive)
  (goto-char (point-max)))
#+END_SRC
*** 4.6.2 用if和get-buffer编写一个函数，说明某个缓冲区是否存在
#+BEGIN_SRC lisp
(defun 2-6-4 (buffer)
  (interactive "BGive me a buffer: ")
  (if (get-buffer buffer)
      (message "The buffer is exist")
    (message "The buffer isn't exist")))
#+END_SRC
*** TODO 4.6.3 用find-tag找到copy-to-buffer函数的源代码
- 进一步学习find-tag，参考12.5节

